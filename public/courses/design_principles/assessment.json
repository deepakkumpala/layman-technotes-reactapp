{
  "courseId": "design_principles",
  "courseTitle": "Design Principles",
  "assessmentTitle": "Software Design Interview",
  "description": "Test your understanding of software design principles through this interview-style assessment.",
  "passingScore": 70,
  "questions": [
    {
      "id": 1,
      "question": "What is Object-Oriented Analysis and Design (OOAD) and what are its key principles?",
      "hint": "Think about abstraction, encapsulation, inheritance, and polymorphism.",
      "sampleAnswer": "OOAD is a software engineering approach that models a system as a collection of interacting objects. Key principles include: Abstraction (hiding complexity, showing only essential features), Encapsulation (bundling data with methods that operate on it, hiding internal state), Inheritance (creating new classes from existing ones, promoting code reuse), and Polymorphism (objects of different types responding to the same interface). OOAD emphasizes modularity, reusability, and maintainability. The process involves analyzing requirements to identify objects and their relationships, then designing the system structure.",
      "points": 10
    },
    {
      "id": 2,
      "question": "Can you explain the SOLID principles and why they're important?",
      "hint": "Think about each letter and maintainable code.",
      "sampleAnswer": "SOLID is an acronym for five design principles: Single Responsibility Principle (a class should have one reason to change), Open/Closed Principle (open for extension, closed for modification), Liskov Substitution Principle (subtypes must be substitutable for base types), Interface Segregation Principle (clients shouldn't depend on interfaces they don't use), and Dependency Inversion Principle (depend on abstractions, not concretions). These principles promote maintainable, scalable, and flexible code by reducing coupling, improving cohesion, and making systems easier to refactor and test.",
      "points": 10
    },
    {
      "id": 3,
      "question": "What is Interoperability and why is it crucial in modern systems?",
      "hint": "Consider system integration and communication.",
      "sampleAnswer": "Interoperability is the ability of different systems, applications, or components to exchange and use information effectively. It enables systems built with different technologies, platforms, or by different vendors to work together seamlessly. Crucial in modern systems because: organizations use diverse technologies, need to integrate legacy and new systems, support multi-vendor environments, and enable data sharing across departments. Achieved through standard protocols (HTTP, REST), data formats (JSON, XML), APIs, and middleware. Essential for cloud integration, microservices, and enterprise architectures.",
      "points": 10
    },
    {
      "id": 4,
      "question": "Explain the DRY principle and its practical implications.",
      "hint": "Think about code duplication and maintainability.",
      "sampleAnswer": "DRY (Don't Repeat Yourself) states that every piece of knowledge should have a single, unambiguous representation in a system. Avoid duplicating code, logic, or data. Violations lead to maintenance nightmares: fixing bugs in multiple places, inconsistent behavior, and harder refactoring. Apply DRY through functions, classes, modules, configuration files, and templates. However, avoid premature abstractionâ€”sometimes apparent duplication represents different concepts that may evolve differently. Balance DRY with clarity and simplicity.",
      "points": 10
    },
    {
      "id": 5,
      "question": "What is Separation of Concerns and how does it improve software design?",
      "hint": "Consider dividing programs into distinct sections.",
      "sampleAnswer": "Separation of Concerns is a design principle for separating a program into distinct sections, each addressing a separate concern. A concern is a specific aspect of functionality (e.g., UI, business logic, data access). Benefits include: easier maintenance (changes isolated to specific areas), better reusability (components can be used independently), improved testability (test concerns in isolation), and parallel development (teams work on different concerns). Implemented through layered architecture, MVC pattern, and modular design. Example: separating presentation, business logic, and data layers in applications.",
      "points": 10
    }
  ]
}
